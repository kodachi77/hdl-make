#!/usr/bin/env python3
import os
import sys
import shutil

argv = sys.argv[1:]

# For debugging...
#sys.stderr.write("fake git: {}\n".format(argv))

if len(argv) == 0:
    print("fake git version 0.0")
    sys.exit(1)
if argv[0] == 'clone':
    if len(argv) == 2:
        # Get the basename of the module
        name = argv[1]
        if name.endswith('.git'):
            name = name[:-4]
        elif name[-1] == '/':
            name = name[:-1]
        name = name[name.rfind('/') + 1:]
        modpath = os.path.join(os.path.dirname(__file__), '..', 'modules', name)
        if os.path.exists(name):
            sys.exit(0)
        print("fake git cloning {} from {}".format(name, modpath))
        # Copy all the files
        shutil.copytree(modpath, name)
        if os.path.exists(os.path.join(name, 'gitmodules')):
            shutil.move(os.path.join(name, 'gitmodules'),
                        os.path.join(name, '.gitmodules'))
        sys.exit(0)
    else:
        print("unhandled fake git clone")
        sys.exit(1)
elif argv[0] == 'checkout':
    if len(argv) == 2:
        sys.exit(0)
    else:
        print("unhandled fake git checkout")
        sys.exit(1)
elif argv[0] == 'submodule':
    if argv[1:] == ['init']:
        sys.exit(0)
    elif argv[1:] == ['update', '--recursive']:
        sys.exit(0)
    elif argv[1] == 'status':
        print('+abcdef {} (remote/origin/master)'.format(argv[2]))
        sys.exit(0)
elif argv == ['config', '-f', '.gitmodules', '--list']:
    sys.stdout.write(open('.gitmodules', 'r').read())
    sys.exit(0)
elif argv == ['rev-parse', '--show-toplevel']:
    print("..")


print("fake git unknown command: {}".format(argv))
sys.exit(1)
